# Prometheus configuration for Kind development cluster
# Complete monitoring stack with proper RBAC and service discovery

# Global Prometheus configuration
prometheus:
  prometheusSpec:
    # Retention and storage
    retention: 30d
    retentionSize: 50GiB
    
    # Resources for development
    resources:
      limits:
        cpu: 2000m
        memory: 8Gi
      requests:
        cpu: 500m
        memory: 2Gi
    
    # Storage configuration for development
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: standard
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi
    
    # Service discovery configuration
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    
    # Enable additional scrape configs for custom metrics
    additionalScrapeConfigs: []
    
    # External labels for federation or multi-cluster setups
    externalLabels:
      cluster: "dev-local"
      environment: "development"

# AlertManager configuration
alertmanager:
  enabled: true
  alertmanagerSpec:
    resources:
      limits:
        cpu: 100m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 128Mi
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: standard
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi

# Grafana configuration
grafana:
  enabled: true
  
  # Disable sensitive key validation for development environment
  assertNoLeakedSecrets: false
  
  # Keep default admin user for sidecar containers (required)
  # Admin user will be created but OIDC will be primary authentication
  adminUser: admin
  adminPassword: admin-password
  
  # Grafana configuration with OIDC
  grafana.ini:
    server:
      root_url: "http://grafana.localhost"
      serve_from_sub_path: false
    
    # OIDC Authentication configuration
    auth.generic_oauth:
      enabled: true
      name: "Dex OIDC"
      allow_sign_up: true
      client_id: "grafana"
      client_secret: "grafana-secret"
      scopes: "openid profile email groups"
      empty_scopes: false
      auth_url: "http://dex.localhost/auth"
      token_url: "http://dex.dex.svc.cluster.local:5556/token"  
      api_url: "http://dex.dex.svc.cluster.local:5556/userinfo"
      team_ids: ""
      allowed_organizations: ""
      role_attribute_path: "contains(groups[*], 'super-admins') && 'Admin' || contains(groups[*], 'admins') && 'Admin' || 'Viewer'"
      
    # Disable anonymous access - OIDC required
    auth.anonymous:
      enabled: false
    
    # Disable basic auth and admin user
    auth.basic:
      enabled: false
    
    # Users configuration - allow both admin and OIDC
    users:
      allow_sign_up: true
      allow_org_create: false
      auto_assign_org: true
      auto_assign_org_id: 1
      auto_assign_org_role: Viewer
      verify_email_enabled: false
      disable_initial_admin_creation: false
  
  # Resources
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  # Persistence
  persistence:
    enabled: true
    storageClassName: standard
    size: 10Gi
    accessModes:
      - ReadWriteOnce
    # Fix for volume mount issues
    type: pvc
    annotations: {}
    
  # Security context - simplified to avoid conflicts
  securityContext:
    runAsNonRoot: true
    runAsUser: 472
    runAsGroup: 472
    fsGroup: 472
    
  # Pod security context
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 472
    runAsGroup: 472
    fsGroup: 472
    fsGroupChangePolicy: "OnRootMismatch"
    seccompProfile:
      type: RuntimeDefault
  
  # Ingress configuration
  ingress:
    enabled: true
    ingressClassName: nginx
    hosts:
      - grafana.localhost
  
  # Default dashboards
  defaultDashboardsEnabled: true
  
  # Additional dashboards
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default

# Node Exporter - collects host-level metrics
nodeExporter:
  enabled: true

# kube-state-metrics - collects Kubernetes object metrics
kubeStateMetrics:
  enabled: true

# Prometheus Operator configuration
prometheusOperator:
  enabled: true
  
  # Resources
  resources:
    limits:
      cpu: 200m
      memory: 200Mi
    requests:
      cpu: 100m
      memory: 100Mi
  
  # Admission webhooks
  admissionWebhooks:
    enabled: true
    patch:
      enabled: true

# Default rules for monitoring Kubernetes cluster
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: true
    configReloaders: true
    general: true
    k8s: true
    kubeApiserverAvailability: true
    kubeApiserverBurnrate: true
    kubeApiserverHistogram: true
    kubeApiserverSlos: true
    kubeControllerManager: true
    kubelet: true
    kubeProxy: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: true
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true

# Service monitors for additional components
additionalServiceMonitors:
  # Monitor kube-dns
  - name: kube-dns
    selector:
      matchLabels:
        k8s-app: kube-dns
    namespaceSelector:
      matchNames:
        - kube-system
    endpoints:
    - port: metrics
      interval: 30s
      path: /metrics

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []

# Cleanup on uninstall
cleanupCustomResource: true
